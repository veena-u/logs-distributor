version: "3.8"

services:
  # Main distributor service
  distributor:
    build:
      context: ..
      dockerfile: docker/services/distributor/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - NODE_ENV=production
      - MAX_QUEUE_SIZE=10000
      - BATCH_SIZE=100
      - PROCESSING_INTERVAL=10
      - HEALTH_CHECK_INTERVAL=15000
      - HEALTH_CHECK_TIMEOUT=5000
      - FAILURE_THRESHOLD=3
      - ANALYZERS=analyzer-1:http://analyzer-1:8081:0.4,analyzer-2:http://analyzer-2:8081:0.3,analyzer-3:http://analyzer-3:8081:0.3
    depends_on:
      - analyzer-1
      - analyzer-2
      - analyzer-3
    networks:
      - logs-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Analyzer services
  analyzer-1:
    build:
      context: ..
      dockerfile: docker/services/analyzer/Dockerfile
    environment:
      - PORT=8081
      - ANALYZER_ID=analyzer-1
      - WEIGHT=0.4
      - ERROR_RATE=0.02
    networks:
      - logs-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  analyzer-2:
    build:
      context: ..
      dockerfile: docker/services/analyzer/Dockerfile
    environment:
      - PORT=8081
      - ANALYZER_ID=analyzer-2
      - WEIGHT=0.3
      - ERROR_RATE=0.05
    networks:
      - logs-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  analyzer-3:
    build:
      context: ..
      dockerfile: docker/services/analyzer/Dockerfile
    environment:
      - PORT=8081
      - ANALYZER_ID=analyzer-3
      - WEIGHT=0.3
      - ERROR_RATE=0.01
    networks:
      - logs-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Load generator service
  load-generator:
    build:
      context: ..
      dockerfile: docker/services/load-generator/Dockerfile
    environment:
      - TARGET_URL=http://distributor:8080
      - REQUESTS_PER_SECOND=50
      - DURATION=300
      - RAMP_UP_TIME=30
      - MESSAGES_PER_PACKET=5
    depends_on:
      - distributor
    networks:
      - logs-network
    restart: "no"
    profiles:
      - testing

  # Monitoring dashboard (optional)
  monitor:
    build:
      context: ..
      dockerfile: docker/services/monitor/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - DISTRIBUTOR_URL=http://distributor:8080
      - REFRESH_INTERVAL=2000
    depends_on:
      - distributor
    networks:
      - logs-network
    restart: unless-stopped
    profiles:
      - monitoring

networks:
  logs-network:
    driver: bridge
    name: logs-network

volumes:
  logs-data:
    driver: local
